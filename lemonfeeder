#!/usr/bin/python3
from subprocess import Popen, PIPE, run
from concurrent.futures import ThreadPoolExecutor
from urllib.request import Request, urlopen, URLError, HTTPError
from json import dumps as json_encode, loads as json_decode
from threading import RLock
import os, select, i3ipc, signal, datetime, re, time

def mix(f, t, a):
	def from_color(color):
		color = int(color[1:], 16)
		return (color >> 16 & 0xFF, color >> 8 & 0xFF, color & 0xFF)

	f = from_color(f)
	t = from_color(t)
	color = (
		int(f[0] + (t[0] - f[0]) * a),
		int(f[1] + (t[1] - f[1]) * a),
		int(f[2] + (t[2] - f[2]) * a))
	return '#' + \
		hex(color[0] << 16 | color[1] << 8 | color[2])[2:]

colors = {
	'text':   '#FEFEFE',
	'normal': '#2F343F',
	'altern': '#383C3A',
	'good':   '#0CBC01',
	'urgent': '#CC0000',
	'active': '#FF5500',
}
theme = {
	'foreground': colors['text'],
	'background': colors['normal'],
	'selected': mix(colors['normal'], colors['active'], 0.5),
	'twitch': mix(colors['normal'], '#8e44ad', 0.9),
	'datetime': mix(colors['normal'], '#e74c3c', 0.45),
	'volume': mix(colors['normal'], '#1abc9c', 0.5),
	'power': mix(colors['normal'], '#3498db', 0.3),
	'internet': mix(colors['normal'], '#FDD835', 0.7),
}

def button(action, content, btn=1):
	return '%{A'+str(btn)+':'+action+':}'+content+'%{A}'
def fg(color, text):
	normal = theme['foreground']
	return f'%{{F{color}}}{text}%{{F{normal}}}'

class Background(object):
	__slots__ = 'color', 'normal', 'widget'
	def __init__(self, widget, color):
		self.normal = theme['background']
		self.widget = widget
		self.color = color
	def render_widget(self, now):
		text, u = self.widget.render_widget(now)
		return '%{B'+self.color+'}  '+text+'  ', u
		
class Widget(object):
	__slots__ = 'next_time', 'cached', 'dirty', 'timer'
	def __init__(self):
		self.next_time = 0
		self.dirty = True
		self.timer = 0
	def set_timer(self, time):
		self.timer = time
	def set_dirty(self):
		self.dirty = True
	def render_widget(self, now):
		if self.timer > 0 and self.next_time <= now:
			self.dirty = True
		if not self.dirty:
			return self.cached, False
		self.cached = self.render()
		self.dirty = False
		self.next_time = now + self.timer
		return self.cached, True
	def render(self):
		return ''
	def action(self):
		pass

class I3Workspaces(Widget):
	__slots__ = ()
	def __init__(self):
		super().__init__()
		self.set_timer(5)
		i3.on('workspace::focus', self.on_workspace_focus)
		hooks['workspace'] = self
	def on_workspace_focus(self, i3, e):
		self.set_dirty()
		render_all()
	def render(self):
		window = i3.get_tree().find_focused().name
		workspaces = i3.get_workspaces()
		ids = []
		max_ws = 0
		for workspace in workspaces:
			ids.append(workspace.num)
			if workspace.num > max_ws:
				max_ws = workspace.num

		parts = []
		index = 0
		for _id in range(1, max_ws + 1):
			if _id not in ids:
				parts.append(button(f'workspace select {_id}', '\uf10c'))
				continue
			workspace = workspaces[index]
			text = '\uf111' if workspace.visible else '\uf192'
			text = button(f'workspace select {_id}', text)
			if workspace.urgent:
				text = fg(colors['urgent'], text)
			parts.append(text)
			index += 1
		return ' '.join(parts)
	def goto(self, nr):
		i3.command(f'workspace {nr}')
	def action(self, args):
		if args[0] == 'select':	
			self.goto(args[1])
			return
		
		workspaces = i3.get_workspaces()
		index = None
		for i in range(0, len(workspaces)):
			if workspaces[i].focused:
				index = i
				break

		if args[0] == 'prev':
			index -= 1
			if index >= 0:
				self.goto(workspaces[index].num)
		elif args[0] == 'next':
			index += 1
			if index < len(workspaces):
				self.goto(workspaces[index].num)

class I3WindowTitle(Widget):
	__slots__ = ()
	def __init__(self):
		super().__init__()
		self.set_timer(5)
		hooks['window'] = self
		i3.on('window::focus', self.on_window_focus)
	def on_window_focus(self, i3, e):
		self.set_dirty()
		render_all()
	def render(self):
		window = i3.get_tree().find_focused().name
		if window is None: return self.cached
		if len(window) > 47:
			window = window[:47] + '...'
		return window

class Twitch(Widget):
	__slots__ = 'secrets', 'json_cache', 'dont_submit', 'count', 'config_dir'
	def __init__(self):
		super().__init__()
		self.json_cache = '/tmp/twitch.json'
		self.dont_submit = False
		self.config_dir = os.path.expanduser('~') + '/.config'
		self.count = 0
		self.set_timer(60 * 3)
		hooks['twitch'] = self
		path = self.config_dir+'/secrets.json'
		with open(path, 'r') as _file:
			self.secrets = json_decode(_file.read())
	def render(self):
		if not self.dont_submit:
			pool.submit(self.load_streams)
		else:
			self.dont_submit = False
		twitch = button('twitch reload', f'\uf1e8 {self.count}', 3)
		twitch = button('twitch show', twitch)
		return twitch
	def action(self, args):
		if   args[0] == 'reload':
			pool.submit(self.load_streams)
		elif args[0] == 'show':
			Popen([self.config_dir+'/i3scripts/play'], start_new_session=True)

	def load_streams(self):
		json_cache = self.json_cache
		secrets = self.secrets
		try:
			re = Request('https://api.twitch.tv/kraken/streams/followed')
			re.add_header('Client-ID', secrets['twitch_client_id'])
			re.add_header('Authorization', secrets['twitch_user_oauth'])
			response = urlopen(re).read()
			streams = json_decode(response.decode('utf-8'))

			try:
				with open(json_cache, 'r') as cache:
					prev_streams = json_decode(cache.read())
					prev_streams = list(map(lambda s: s['name'], prev_streams))
			except IOError:
				prev_streams = []

			went_live = []
			live_streams = []
			for stream in streams['streams']:
				if stream['stream_type'] != 'live':
					continue
				channel = stream['channel']
				live_streams.append({
					'name': channel['name'],
					'display_name': channel['display_name'],
					'game': stream['game'],
					'viewers': stream['viewers'],
				})
				if channel['name'] not in prev_streams:
					went_live.append(channel['display_name'])

			if len(went_live) > 0:
				run(['notify-send', 'Twitch', '\n'.join(went_live)])

		except (URLError, HTTPError) as e:
			print(e)
			live_streams = []

		with open(json_cache, 'w') as cache:
			cache.write(json_encode(live_streams))

		lock.acquire()
		self.dont_submit = True
		self.count = len(live_streams)
		self.set_dirty()
		render_all()
		lock.release()

class Time(Widget):
	__slots__ = ()
	def __init__(self):
		super().__init__()
		self.set_timer(10)
	def render(self):
		return datetime.datetime.now().strftime('%Y-%m-%d | %H:%M')

class Volume(Widget):
	__slots__ = ()
	def __init__(self):
		super().__init__()
		hooks['volume'] = self
	def volume_info(self):
		info = Popen(['pacmd', 'list-sinks'], stdout=PIPE)
		info = info.communicate()[0].decode()
		match = re.search('\* index: (\d+)', info)
		end  = info.index('properties:', match.start())
		info = match.string[match.start() : end]
		volume = int(re.search('volume: front-left: \d+ / +(\d+)%', info).group(1))
		muted  = re.search('muted: (yes|no)', info).group(1) == 'yes'
		return (match.group(1), volume, muted)
	def render(self):
		sink, volume, muted = self.volume_info()
		if muted:
			icon = '\uf026'
		elif volume < 35:
			icon = '\uf027'
		else:
			icon = '\uf028'
		volume = str(volume)
		volume = icon + (' ' * (4 - len(volume))) + volume + '%'
		volume = button('volume mute', volume, 3)
		volume = button('volume up',   volume, 4)
		volume = button('volume down', volume, 5)
		return volume
	def action(self, args):
		action = args[0]
		sink, volume, muted = self.volume_info()
		if action == 'mute':
			run(['pactl', 'set-sink-mute', sink, 'toggle'])
		else:
			volume = (volume+5 if action=='up' else volume-5)
			volume = int(round(volume/5.0)) * 5
			volume = max(0, min(150, volume))
			run(['pactl', 'set-sink-volume', sink, str(volume)+'%'])
		self.set_dirty()
		render_all()

class Battery(Widget):
	__slots__ = ()
	def __init__(self):
		super().__init__()
		self.set_timer(15)
	def render(self):
		acpi = Popen(['acpi', '-b'], stdout=PIPE)
		match = re.match('^Battery (\d+): (\w+), (\d+)%(?:, (\d{2}:\d{2}):\d{2})?', \
			acpi.communicate()[0].decode())
		if match is None:
			return ''

		status  = match.group(2)
		percent = int(match.group(3))
		if status == 'Charging' or status == 'Full':
			color = theme['foreground']
			icon  = '\uf0e7'
		elif percent < 25:
			color = '#FF0000'
			icon  = '\uf243'
		elif percent < 50:
			color = '#FFF600'
			icon  = '\uf242'
		elif percent < 85:
			color = '#A8FF00'
			icon  = '\uf241'
		else:
			color = '#A8FF00'
			icon  = '\uf240'

		percent = str(percent)
		text = fg(color, icon) \
			+ (' ' * (4 - len(percent))) \
			+ percent + '%'

		if status == 'Discharging':
			text += ' ('+match.group(4)+')'
		return text

class Internet(Widget):
	__slots__ = ('interface')
	def __init__(self):
		super().__init__()
		self.set_timer(15)
	def render(self):
		route = Popen(['ip', 'route'], stdout=PIPE)
		route = route.communicate()[0].decode()
		match = re.match(
			'default via (\d+\.\d+\.\d+\.\d+) dev (\w+)',
			route)
		if match is None:
			return ''
		dev = match.group(2)
		ip  = match.group(1)
		try:
			if os.path.exists(f'/sys/class/net/{dev}/wireless'):
				with(open("/proc/net/wireless", 'r')) as signal_info:
					match = re.search(
						f'{dev}: \d+ +(\d+)',
						signal_info.read())
					signal = float(match.group(1))
					signal = int(signal * 100. / 70. + .5)
					return f'\uF1EB {signal}%'
			else:
				return ip
		except IOError:
			return ip

hooks = { }
lock = RLock()
i3 = i3ipc.Connection()
pool = ThreadPoolExecutor(max_workers=1)

left_widgets = [
	I3Workspaces(),
]
center_widgets = [
	I3WindowTitle(),
]
right_widgets = [
	Background(Twitch(), theme['twitch']),
	Background(Volume(), theme['volume']),
	Background(Battery(), theme['power']),
	Background(Internet(), theme['internet']),
	Background(Time(), theme['datetime']),
]

bar_args = [
	'lemonbar',
	'-u', '2',  # Underline thickness
	'-a', '20', # Max clickable areas
	'-B', theme['background'],
	'-F', theme['foreground'],
	'-U', theme['selected'],

	'-f', 'Droid Sans-10',
	'-f', 'FontAwesome-11',
]

def render_widgets(widgets, now):
	updated = False
	parts = []
	for w in widgets:
		t, u = w.render_widget(now)
		parts.append(t)
		updated |= u
	return ''.join(parts), updated

def render_all():
	lock.acquire()
	now = time.time()
	left,   u1 = render_widgets(left_widgets, now)
	center, u2 = render_widgets(center_widgets, now)
	right,  u3 = render_widgets(right_widgets, now)
	if u1 or u2 or u3:
		left = button('workspace prev', '  '+left, 4)
		left = button('workspace next', left, 5)
		center = button('workspace prev', center, 4)
		center = button('workspace next', center, 5)
		bar_str = left+'%{c}'+center+'%{r}'+right+'%{B'+theme['background']+'}'
		bar.stdin.write((bar_str + '\n').encode())
		bar.stdin.flush()
	lock.release()

bar = None
def remake_bar(i3, e):
	global bar
	if bar is not None:
		bar.stdin.close()
		bar.wait()
	xrandr = Popen(['xrandr'], stdout=PIPE)
	xrandr = xrandr.communicate()[0].decode()
	xrandr = re.search('(\d+)x\d+i? +\d+.\d+\*', xrandr)
	bar = Popen(bar_args + ['-g', xrandr.group(1) + 'x30+0+0'], stdin=PIPE, stdout=PIPE)

print('started')
remake_bar(i3, None)
i3.on('output', remake_bar)
i3.event_socket_setup()
render_all()
try:
	while True:
		ready, _, _ = select.select([bar.stdout, i3.sub_socket], [], [], 1)
		for pipe in ready:
			if pipe == bar.stdout:
				action = bar.stdout.readline().decode()[:-1].split(' ')
				hooks[action[0]].action(action[1:])
				time.sleep(0.03)
			elif pipe == i3.sub_socket:
				i3.event_socket_poll()
		render_all()
except KeyboardInterrupt:
	pass

pool.shutdown()


